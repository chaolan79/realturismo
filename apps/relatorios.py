import streamlit as st
import pandas as pd
import plotly.express as px
from database import Session, Manutencao, Veiculo, Acessorio
from datetime import datetime, date, timedelta
import locale
import io
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib import colors

# Configurar a localiza√ß√£o para formato brasileiro
try:
    locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')
except locale.Error:
    locale.setlocale(locale.LC_ALL, '')

# Inicializar a sess√£o do banco de dados
session = Session()

# Fun√ß√µes auxiliares para formata√ß√£o
def formatar_valor_monetario(valor):
    valor_formatado = f"{float(valor):,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
    return f"R$ {valor_formatado}"

def formatar_valor_ptbr(valor):
    return f"{float(valor):,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")

# Fun√ß√£o para exportar DataFrame para CSV
def exportar_csv(df, nome_arquivo):
    buffer = io.StringIO()
    df.to_csv(buffer, index=False, encoding='utf-8')
    buffer.seek(0)
    return buffer

# Fun√ß√£o para exportar DataFrame para PDF
def exportar_pdf(df, nome_arquivo):
    buffer = io.BytesIO()
    c = canvas.Canvas(buffer, pagesize=letter)
    width, height = letter
    c.setFont("Helvetica", 10)

    # T√≠tulo do PDF
    c.drawString(30, height - 30, f"Relat√≥rio: {nome_arquivo}")
    c.drawString(30, height - 50, f"Gerado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")

    # Cabe√ßalhos
    y = height - 80
    colunas = df.columns.tolist()
    col_width = (width - 60) / len(colunas)
    for i, col in enumerate(colunas):
        c.drawString(30 + i * col_width, y, str(col))
    y -= 20
    c.line(30, y, width - 30, y)

    # Dados
    for index, row in df.iterrows():
        if y < 50:  # Nova p√°gina se necess√°rio
            c.showPage()
            c.setFont("Helvetica", 10)
            y = height - 30
        y -= 20
        for i, col in enumerate(colunas):
            c.drawString(30 + i * col_width, y, str(row[col])[:30])  # Limite de 30 caracteres por c√©lula

    c.save()
    buffer.seek(0)
    return buffer

# Fun√ß√£o para obter dados de manuten√ß√µes
def obter_dados_manutencoes(filtro_status=None, data_inicio=None, data_fim=None, veiculo_id=None, session_instance=None):
    if not session_instance:
        return pd.DataFrame()
    try:
        query = session_instance.query(Manutencao)
        if veiculo_id:
            query = query.filter(Manutencao.veiculo_id == veiculo_id)
        if data_inicio:
            query = query.filter(Manutencao.data_manutencao >= data_inicio)
        if data_fim:
            query = query.filter(Manutencao.data_manutencao <= data_fim)
        manutencoes = query.all()
        
        if not manutencoes:
            return pd.DataFrame()
        dados_manutencoes = []
        for m in manutencoes:
            veiculo = session_instance.query(Veiculo).filter_by(id=m.veiculo_id).first()
            veiculo_nome = f"{veiculo.codigo} - {veiculo.placa} ({veiculo.modelo})" if veiculo else "Desconhecido"
            hodometro_atual = veiculo.hodometro_atual if veiculo and hasattr(veiculo, 'hodometro_atual') else m.hodometro_manutencao

            vencida = False
            alerta = False
            motivo = ""
            if hasattr(m, 'tem_vencimento') and m.tem_vencimento:
                if m.data_vencimento:
                    dias_restantes = (m.data_vencimento - date.today()).days
                    if dias_restantes < 0:
                        vencida = True
                        motivo = f"Vencida por data ({m.data_vencimento})"
                    elif dias_restantes <= 30:
                        alerta = True
                        motivo = f"Alerta por data ({dias_restantes} dias restantes)"
                if m.km_vencimento and hodometro_atual > m.km_vencimento:
                    vencida = True
                    motivo = f"Vencida por KM ({hodometro_atual} > {m.km_vencimento})"
                elif m.km_vencimento and (m.km_vencimento - hodometro_atual) <= 1000:
                    alerta = True
                    motivo = f"Alerta por KM ({m.km_vencimento - hodometro_atual} KM restantes)"
            status = "Vencida" if vencida else "Alerta" if alerta else "Saud√°vel"
            dados_manutencoes.append({
                "ID": m.id,
                "Ve√≠culo": veiculo_nome,
                "Categoria": m.categoria,
                "Respons√°vel": m.responsavel if hasattr(m, 'responsavel') else "N/A",
                "Oficina": m.oficina if hasattr(m, 'oficina') else "N/A",
                "Tipo": m.tipo,
                "KM Aviso": m.km_aviso if hasattr(m, 'km_aviso') else None,
                "KM Aviso (km)": f"{formatar_valor_ptbr(m.km_aviso)} km" if hasattr(m, 'km_aviso') and m.km_aviso else "N/A",
                "Data Manuten√ß√£o": m.data_manutencao,
                "Hod√¥metro": m.hodometro_manutencao,
                "Hod√¥metro (km)": f"{formatar_valor_ptbr(m.hodometro_manutencao)} km" if m.hodometro_manutencao else "N/A",
                "Valor (R$)": m.valor_manutencao if m.valor_manutencao else 0.0,
                "Valor Formatado (R$)": formatar_valor_monetario(m.valor_manutencao) if m.valor_manutencao else "N/A",
                "KM Vencimento": m.km_vencimento if hasattr(m, 'km_vencimento') else None,
                "KM Vencimento (km)": f"{formatar_valor_ptbr(m.km_vencimento)} km" if hasattr(m, 'km_vencimento') and m.km_vencimento else "N/A",
                "Descri√ß√£o": m.descricao,
                "Status": status,
                "Data Realiza√ß√£o": m.data_realizacao if hasattr(m, 'data_realizacao') else None,
                "Motivo": motivo
            })
        df = pd.DataFrame(dados_manutencoes)
        if filtro_status:
            df = df[df["Status"].isin(filtro_status)]
        return df
    except Exception as e:
        st.error(f"Erro ao obter dados de manuten√ß√µes: {e}")
        return pd.DataFrame()

# Fun√ß√£o para obter dados de acess√≥rios
def obter_dados_acessorios(filtro_status=None, data_inicio=None, data_fim=None, session_instance=None):
    if not session_instance:
        return pd.DataFrame()
    try:
        query = session_instance.query(Acessorio)
        if data_inicio:
            query = query.filter(Acessorio.data_instalacao >= data_inicio)
        if data_fim:
            query = query.filter(Acessorio.data_instalacao <= data_fim)
        acessorios = query.all()
        
        if not acessorios:
            return pd.DataFrame()
        dados_acessorios = []
        for a in acessorios:
            veiculo = session_instance.query(Veiculo).filter_by(id=a.veiculo_id).first()
            veiculo_nome = f"{veiculo.codigo} - {veiculo.placa} ({veiculo.modelo})" if veiculo else "Desconhecido"
            hodometro_atual = veiculo.hodometro_atual if veiculo and hasattr(veiculo, 'hodometro_atual') else a.km_instalacao

            vencido = False
            alerta = False
            motivo = ""
            if hasattr(a, 'tem_vencimento') and a.tem_vencimento:
                if a.data_vencimento:
                    dias_restantes = (a.data_vencimento - date.today()).days
                    if dias_restantes < 0:
                        vencido = True
                        motivo = f"Vencido por data ({a.data_vencimento})"
                    elif dias_restantes <= 30:
                        alerta = True
                        motivo = f"Alerta por data ({dias_restantes} dias restantes)"
                if a.km_vencimento and hodometro_atual > a.km_vencimento:
                    vencido = True
                    motivo = f"Vencido por KM ({hodometro_atual} > {a.km_vencimento})"
                elif a.km_vencimento and (a.km_vencimento - hodometro_atual) <= 1000:
                    alerta = True
                    motivo = f"Alerta por KM ({a.km_vencimento - hodometro_atual} KM restantes)"
            status = "Vencida" if vencido else "Alerta" if alerta else "Saud√°vel"
            dados_acessorios.append({
                "ID": a.id,
                "Ve√≠culo": veiculo_nome,
                "Nome": a.nome,
                "KM Instala√ß√£o": a.km_instalacao,
                "KM Instala√ß√£o (km)": f"{formatar_valor_ptbr(a.km_instalacao)} km",
                "KM Vencimento": a.km_vencimento if hasattr(a, 'km_vencimento') else None,
                "KM Vencimento (km)": f"{formatar_valor_ptbr(a.km_vencimento)} km" if hasattr(a, 'km_vencimento') and a.km_vencimento else "N/A",
                "Data Instala√ß√£o": a.data_instalacao,
                "Data Vencimento": a.data_vencimento if a.data_vencimento else "N/A",
                "Status": status,
                "Descri√ß√£o": a.descricao,
                "Motivo": motivo
            })
        df = pd.DataFrame(dados_acessorios)
        if filtro_status:
            df = df[df["Status"].isin(filtro_status)]
        return df
    except Exception as e:
        st.error(f"Erro ao obter dados de acess√≥rios: {e}")
        return pd.DataFrame()

# Fun√ß√£o principal para exibir relat√≥rios
def exibir_relatorios():
    st.title("üìä **Relat√≥rios Avan√ßados**")

    # Barra lateral com op√ß√µes de submenu
    submenu = st.sidebar.radio("üîç Escolha:", [
        "Manuten√ß√µes por Ve√≠culo", "Manuten√ß√µes por Status", "Acess√≥rios Vencidos por Ano",
        "Gastos por Per√≠odo", "Custo M√©dio por Manuten√ß√£o", "KM Rodado vs. Manuten√ß√µes"
    ])

    # Relat√≥rio: Manuten√ß√µes por Ve√≠culo
    if submenu == "Manuten√ß√µes por Ve√≠culo":
        st.subheader("üöó **Manuten√ß√µes por Ve√≠culo**")

        veiculos = session.query(Veiculo).all()
        veiculos_dict = {f"{v.codigo} - {v.placa} ({v.modelo})": v.id for v in veiculos}

        if not veiculos_dict:
            st.warning("‚ö†Ô∏è Nenhum ve√≠culo cadastrado!")
        else:
            veiculo_selecionado = st.selectbox("üöó **Selecione o Ve√≠culo**", options=["Todos"] + list(veiculos_dict.keys()), index=0)
            data_inicio = st.date_input("üìÖ **Data In√≠cio**", value=None)
            data_fim = st.date_input("üìÖ **Data Fim**", value=None)
            ano_selecionado = st.selectbox("üìÖ **Filtrar por Ano**", options=["Todos"] + sorted(list(range(2020, date.today().year + 1)), reverse=True), index=0)
            status_filter = st.multiselect("üìã Filtrar por Status", options=["Saud√°vel", "Alerta", "Vencida"], default=None)

            if st.button("Gerar Relat√≥rio"):
                veiculo_id = veiculos_dict[veiculo_selecionado] if veiculo_selecionado != "Todos" else None
                df = obter_dados_manutencoes(filtro_status=status_filter, data_inicio=data_inicio, data_fim=data_fim, veiculo_id=veiculo_id, session_instance=session)
                
                if ano_selecionado != "Todos":
                    df = df[pd.to_datetime(df["Data Manuten√ß√£o"]).dt.year == int(ano_selecionado)]

                if not df.empty:
                    # Gr√°fico de Colunas: Manuten√ß√µes por Ve√≠culo e Status
                    df_grouped = df.groupby(["Ve√≠culo", "Status"]).size().reset_index(name="Quantidade")
                    fig_colunas = px.bar(df_grouped, x="Ve√≠culo", y="Quantidade", color="Status", 
                                         title="üìä Quantidade de Manuten√ß√µes por Ve√≠culo e Status", 
                                         barmode="group", color_discrete_sequence=['#4CAF50', '#FFC107', '#FF5722'])
                    fig_colunas.update_layout(height=400, xaxis_title="Ve√≠culo", yaxis_title="Quantidade de Manuten√ß√µes")
                    st.plotly_chart(fig_colunas, use_container_width=True)

                    # Gr√°fico de Pizza: Distribui√ß√£o por Tipo (apenas para ve√≠culo selecionado, se aplic√°vel)
                    if veiculo_selecionado != "Todos":
                        df_tipo = df.groupby("Tipo").size().reset_index(name="Quantidade")
                        fig_pizza = px.pie(df_tipo, names="Tipo", values="Quantidade", 
                                           title=f"üìä Distribui√ß√£o de Manuten√ß√µes por Tipo ({veiculo_selecionado})", hole=0.3)
                        fig_pizza.update_layout(height=400)
                        st.plotly_chart(fig_pizza, use_container_width=True)

                    # Exibir dados
                    st.markdown("### üìã **Dados Detalhados**")
                    st.dataframe(df[["Ve√≠culo", "Categoria", "Tipo", "Status", "Data Manuten√ß√£o", "Valor Formatado (R$)", "Motivo"]], use_container_width=True)

                    # Bot√µes de exporta√ß√£o
                    col1, col2 = st.columns(2)
                    with col1:
                        csv_buffer = exportar_csv(df, "manutencoes_por_veiculo.csv")
                        st.download_button(
                            label="üì• Exportar CSV",
                            data=csv_buffer,
                            file_name="manutencoes_por_veiculo.csv",
                            mime="text/csv"
                        )
                    with col2:
                        pdf_buffer = exportar_pdf(df, "Manuten√ß√µes por Ve√≠culo")
                        st.download_button(
                            label="üì• Exportar PDF",
                            data=pdf_buffer,
                            file_name="manutencoes_por_veiculo.pdf",
                            mime="application/pdf"
                        )
                else:
                    st.warning("‚ö†Ô∏è Nenhuma manuten√ß√£o encontrada para os filtros aplicados!")

    # Relat√≥rio: Manuten√ß√µes por Status
    elif submenu == "Manuten√ß√µes por Status":
        st.subheader("üìã **Manuten√ß√µes por Status**")

        data_inicio = st.date_input("üìÖ **Data In√≠cio**", value=None)
        data_fim = st.date_input("üìÖ **Data Fim**", value=None)
        status_filter = st.multiselect("üìã Filtrar por Status", options=["Saud√°vel", "Alerta", "Vencida"], default=None)

        if st.button("Gerar Relat√≥rio"):
            df = obter_dados_manutencoes(filtro_status=status_filter, data_inicio=data_inicio, data_fim=data_fim, session_instance=session)

            if not df.empty:
                # Gr√°fico de Pizza: Distribui√ß√£o por Status
                df_status = df.groupby("Status").size().reset_index(name="Quantidade")
                fig_pizza = px.pie(df_status, names="Status", values="Quantidade", 
                                   title="üìä Distribui√ß√£o de Manuten√ß√µes por Status", hole=0.3,
                                   color_discrete_sequence=['#4CAF50', '#FFC107', '#FF5722'])
                fig_pizza.update_layout(height=400)
                st.plotly_chart(fig_pizza, use_container_width=True)

                # Gr√°fico de Linhas: Evolu√ß√£o por Status ao Longo do Tempo (por M√™s)
                df['M√™s'] = pd.to_datetime(df['Data Manuten√ß√£o']).dt.strftime('%Y-%m')
                df_evolucao = df.groupby(["M√™s", "Status"]).size().reset_index(name="Quantidade")
                fig_linhas = px.line(df_evolucao, x="M√™s", y="Quantidade", color="Status", 
                                     title="üìâ Evolu√ß√£o de Manuten√ß√µes por Status ao Longo do Tempo",
                                     color_discrete_sequence=['#4CAF50', '#FFC107', '#FF5722'])
                fig_linhas.update_layout(height=400, xaxis_title="M√™s", yaxis_title="Quantidade")
                st.plotly_chart(fig_linhas, use_container_width=True)

                # Exibir dados
                st.markdown("### üìã **Dados Detalhados**")
                st.dataframe(df[["Ve√≠culo", "Categoria", "Tipo", "Status", "Data Manuten√ß√£o", "Valor Formatado (R$)", "Motivo"]], use_container_width=True)

                # Bot√µes de exporta√ß√£o
                col1, col2 = st.columns(2)
                with col1:
                    csv_buffer = exportar_csv(df, "manutencoes_por_status.csv")
                    st.download_button(
                        label="üì• Exportar CSV",
                        data=csv_buffer,
                        file_name="manutencoes_por_status.csv",
                        mime="text/csv"
                    )
                with col2:
                    pdf_buffer = exportar_pdf(df, "Manuten√ß√µes por Status")
                    st.download_button(
                        label="üì• Exportar PDF",
                        data=pdf_buffer,
                        file_name="manutencoes_por_status.pdf",
                        mime="application/pdf"
                    )
            else:
                st.warning("‚ö†Ô∏è Nenhuma manuten√ß√£o encontrada para o per√≠odo selecionado!")

    # Relat√≥rio: Acess√≥rios Vencidos por Ano
    elif submenu == "Acess√≥rios Vencidos por Ano":
        st.subheader("üõ†Ô∏è **Acess√≥rios Vencidos por Ano**")

        ano_inicio = st.selectbox("üìÖ **Ano In√≠cio**", options=["Todos"] + sorted(list(range(2020, date.today().year + 1))), index=0)
        ano_fim = st.selectbox("üìÖ **Ano Fim**", options=["Todos"] + sorted(list(range(2020, date.today().year + 1)), reverse=True), index=0)
        status_filter = st.multiselect("üìã Filtrar por Status", options=["Saud√°vel", "Alerta", "Vencida"], default=["Vencida"])

        if st.button("Gerar Relat√≥rio"):
            data_inicio = datetime.strptime(f"{ano_inicio}-01-01", "%Y-%m-%d").date() if ano_inicio != "Todos" else None
            data_fim = datetime.strptime(f"{ano_fim}-12-31", "%Y-%m-%d").date() if ano_fim != "Todos" else None
            df = obter_dados_acessorios(filtro_status=status_filter, data_inicio=data_inicio, data_fim=data_fim, session_instance=session)

            if not df.empty:
                # Gr√°fico de Colunas: Acess√≥rios Vencidos por Ano
                df['Ano'] = pd.to_datetime(df['Data Instala√ß√£o']).dt.year
                df_ano = df.groupby("Ano").size().reset_index(name="Quantidade")
                fig_colunas = px.bar(df_ano, x="Ano", y="Quantidade", title="üìä Acess√≥rios Vencidos por Ano",
                                     labels={"Ano": "Ano", "Quantidade": "Quantidade"}, color="Ano")
                fig_colunas.update_layout(height=400)
                st.plotly_chart(fig_colunas, use_container_width=True)

                # Gr√°fico de Dispers√£o: Acess√≥rios Vencidos por Ano e Ve√≠culo
                fig_dispersao = px.scatter(df, x="Ano", y="Ve√≠culo", color="Nome", 
                                           title="üìç Acess√≥rios Vencidos por Ano e Ve√≠culo", size_max=10)
                fig_dispersao.update_layout(height=400)
                st.plotly_chart(fig_dispersao, use_container_width=True)

                # Exibir dados
                st.markdown("### üìã **Dados Detalhados**")
                st.dataframe(df[["Ve√≠culo", "Nome", "Data Instala√ß√£o", "Data Vencimento", "Status", "Motivo"]], use_container_width=True)

                # Bot√µes de exporta√ß√£o
                col1, col2 = st.columns(2)
                with col1:
                    csv_buffer = exportar_csv(df, "acessorios_vencidos_por_ano.csv")
                    st.download_button(
                        label="üì• Exportar CSV",
                        data=csv_buffer,
                        file_name="acessorios_vencidos_por_ano.csv",
                        mime="text/csv"
                    )
                with col2:
                    pdf_buffer = exportar_pdf(df, "Acess√≥rios Vencidos por Ano")
                    st.download_button(
                        label="üì• Exportar PDF",
                        data=pdf_buffer,
                        file_name="acessorios_vencidos_por_ano.pdf",
                        mime="application/pdf"
                    )
            else:
                st.warning("‚ö†Ô∏è Nenhum acess√≥rio vencido encontrado!")

    # Relat√≥rio: Gastos por Per√≠odo
    elif submenu == "Gastos por Per√≠odo":
        st.subheader("üí∞ **Gastos por Per√≠odo**")

        data_inicio = st.date_input("üìÖ **Data In√≠cio**", value=None)
        data_fim = st.date_input("üìÖ **Data Fim**", value=None)
        status_filter = st.multiselect("üìã Filtrar por Status", options=["Saud√°vel", "Alerta", "Vencida"], default=["Alerta", "Vencida"])
        categoria_filter = st.multiselect("üî© Filtrar por Categoria", options=[cat[0] for cat in session.query(Manutencao.categoria).distinct().all()], default=None)

        if st.button("Gerar Relat√≥rio"):
            if data_inicio and data_fim:
                df = obter_dados_manutencoes(filtro_status=status_filter, data_inicio=data_inicio, data_fim=data_fim, session_instance=session)
                if categoria_filter:
                    df = df[df["Categoria"].isin(categoria_filter)]
                if not df.empty:
                    # Gr√°fico de Linhas: Gastos Acumulados por Per√≠odo
                    df["Data"] = pd.to_datetime(df["Data Manuten√ß√£o"]).dt.date
                    df_gastos = df.groupby("Data")["Valor (R$)"].sum().reset_index()
                    df_gastos["Total Formatado"] = df_gastos["Valor (R$)"].apply(formatar_valor_monetario)
                    fig_linhas = px.line(df_gastos, x="Data", y="Valor (R$)", title="üìâ Gastos Acumulados por Per√≠odo", 
                                         markers=True, hover_data=["Total Formatado"])
                    fig_linhas.update_layout(height=400, xaxis_title="Data", yaxis_title="Valor (R$)")
                    st.plotly_chart(fig_linhas, use_container_width=True)

                    # Gr√°fico de √Årea: Gastos por Categoria
                    df["Data"] = pd.to_datetime(df["Data Manuten√ß√£o"]).dt.strftime("%Y-%m")
                    df_area = df.groupby(["Data", "Categoria"])["Valor (R$)"].sum().reset_index()
                    fig_area = px.area(df_area, x="Data", y="Valor (R$)", color="Categoria", 
                                       title="üìà Gastos por Categoria ao Longo do Tempo")
                    fig_area.update_layout(height=400, xaxis_title="M√™s", yaxis_title="Valor (R$)")
                    st.plotly_chart(fig_area, use_container_width=True)

                    # Exibir dados
                    st.markdown("### üìã **Dados Detalhados**")
                    st.dataframe(df[["Ve√≠culo", "Categoria", "Data Manuten√ß√£o", "Valor Formatado (R$)", "Status"]], use_container_width=True)

                    # Bot√µes de exporta√ß√£o
                    col1, col2 = st.columns(2)
                    with col1:
                        csv_buffer = exportar_csv(df, "gastos_por_periodo.csv")
                        st.download_button(
                            label="üì• Exportar CSV",
                            data=csv_buffer,
                            file_name="gastos_por_periodo.csv",
                            mime="text/csv"
                        )
                    with col2:
                        pdf_buffer = exportar_pdf(df, "Gastos por Per√≠odo")
                        st.download_button(
                            label="üì• Exportar PDF",
                            data=pdf_buffer,
                            file_name="gastos_por_periodo.pdf",
                            mime="application/pdf"
                        )
                else:
                    st.warning("‚ö†Ô∏è Nenhum gasto registrado no per√≠odo selecionado!")
            else:
                st.error("‚ö†Ô∏è Selecione um per√≠odo v√°lido!")

    # Relat√≥rio: Custo M√©dio por Manuten√ß√£o
    elif submenu == "Custo M√©dio por Manuten√ß√£o":
        st.subheader("üí∏ **Custo M√©dio por Manuten√ß√£o**")

        data_inicio = st.date_input("üìÖ **Data In√≠cio**", value=None)
        data_fim = st.date_input("üìÖ **Data Fim**", value=None)
        categoria_filter = st.multiselect("üî© Filtrar por Categoria", options=[cat[0] for cat in session.query(Manutencao.categoria).distinct().all()], default=None)
        status_filter = st.multiselect("üìã Filtrar por Status", options=["Saud√°vel", "Alerta", "Vencida"], default=None)

        if st.button("Gerar Relat√≥rio"):
            df = obter_dados_manutencoes(filtro_status=status_filter, data_inicio=data_inicio, data_fim=data_fim, session_instance=session)
            if categoria_filter:
                df = df[df["Categoria"].isin(categoria_filter)]

            if not df.empty:
                # Gr√°fico de Barras: Custo M√©dio por Ve√≠culo
                df_custo_medio = df.groupby("Ve√≠culo")["Valor (R$)"].mean().reset_index()
                df_custo_medio["Valor Formatado (R$)"] = df_custo_medio["Valor (R$)"].apply(formatar_valor_monetario)
                fig_barras = px.bar(df_custo_medio, x="Ve√≠culo", y="Valor (R$)", 
                                    title="üìä Custo M√©dio de Manuten√ß√£o por Ve√≠culo", hover_data=["Valor Formatado (R$)"])
                fig_barras.update_layout(height=400, xaxis_title="Ve√≠culo", yaxis_title="Custo M√©dio (R$)")
                st.plotly_chart(fig_barras, use_container_width=True)

                # Gr√°fico de Boxplot: Distribui√ß√£o de Custos por Categoria
                fig_box = px.box(df, x="Categoria", y="Valor (R$)", title="üìâ Distribui√ß√£o de Custos por Categoria",
                                 hover_data=["Ve√≠culo", "Data Manuten√ß√£o"])
                fig_box.update_layout(height=400, xaxis_title="Categoria", yaxis_title="Valor (R$)")
                st.plotly_chart(fig_box, use_container_width=True)

                # Exibir dados
                st.markdown("### üìã **Dados Detalhados**")
                st.dataframe(df[["Ve√≠culo", "Categoria", "Data Manuten√ß√£o", "Valor Formatado (R$)", "Status"]], use_container_width=True)

                # Bot√µes de exporta√ß√£o
                col1, col2 = st.columns(2)
                with col1:
                    csv_buffer = exportar_csv(df, "custo_medio_por_manutencao.csv")
                    st.download_button(
                        label="üì• Exportar CSV",
                        data=csv_buffer,
                        file_name="custo_medio_por_manutencao.csv",
                        mime="text/csv"
                    )
                with col2:
                    pdf_buffer = exportar_pdf(df, "Custo M√©dio por Manuten√ß√£o")
                    st.download_button(
                        label="üì• Exportar PDF",
                        data=pdf_buffer,
                        file_name="custo_medio_por_manutencao.pdf",
                        mime="application/pdf"
                    )
            else:
                st.warning("‚ö†Ô∏è Nenhuma manuten√ß√£o encontrada para os filtros aplicados!")

    # Relat√≥rio: KM Rodado vs. Manuten√ß√µes
    elif submenu == "KM Rodado vs. Manuten√ß√µes":
        st.subheader("üìè **KM Rodado vs. Manuten√ß√µes**")

        data_inicio = st.date_input("üìÖ **Data In√≠cio**", value=None)
        data_fim = st.date_input("üìÖ **Data Fim**", value=None)
        status_filter = st.multiselect("üìã Filtrar por Status", options=["Saud√°vel", "Alerta", "Vencida"], default=None)

        if st.button("Gerar Relat√≥rio"):
            df = obter_dados_manutencoes(filtro_status=status_filter, data_inicio=data_inicio, data_fim=data_fim, session_instance=session)
            if not df.empty:
                # Gr√°fico de Dispers√£o: KM Rodado vs. N√∫mero de Manuten√ß√µes por Ve√≠culo
                df_veiculos = df.groupby("Ve√≠culo").agg({"ID": "count", "Hod√¥metro": "max"}).reset_index()
                df_veiculos = df_veiculos.rename(columns={"ID": "N√∫mero de Manuten√ß√µes", "Hod√¥metro": "KM Rodado"})
                fig_dispersao = px.scatter(df_veiculos, x="KM Rodado", y="N√∫mero de Manuten√ß√µes", color="Ve√≠culo",
                                           title="üìç KM Rodado vs. N√∫mero de Manuten√ß√µes por Ve√≠culo", size_max=10)
                fig_dispersao.update_layout(height=400, xaxis_title="KM Rodado", yaxis_title="N√∫mero de Manuten√ß√µes")
                st.plotly_chart(fig_dispersao, use_container_width=True)

                # Gr√°fico de Linhas: M√©dia de KM por Manuten√ß√£o ao Longo do Tempo
                df["M√™s"] = pd.to_datetime(df["Data Manuten√ß√£o"]).dt.strftime("%Y-%m")
                df_km_media = df.groupby(["M√™s", "Ve√≠culo"]).agg({"Hod√¥metro": "max", "ID": "count"}).reset_index()
                df_km_media["KM por Manuten√ß√£o"] = df_km_media["Hod√¥metro"] / df_km_media["ID"]
                fig_linhas = px.line(df_km_media, x="M√™s", y="KM por Manuten√ß√£o", color="Ve√≠culo",
                                     title="üìâ M√©dia de KM por Manuten√ß√£o ao Longo do Tempo")
                fig_linhas.update_layout(height=400, xaxis_title="M√™s", yaxis_title="KM por Manuten√ß√£o")
                st.plotly_chart(fig_linhas, use_container_width=True)

                # Exibir dados
                st.markdown("### üìã **Dados Detalhados**")
                st.dataframe(df[["Ve√≠culo", "Hod√¥metro (km)", "Data Manuten√ß√£o", "Status"]], use_container_width=True)

                # Bot√µes de exporta√ß√£o
                col1, col2 = st.columns(2)
                with col1:
                    csv_buffer = exportar_csv(df, "km_rodado_vs_manutencoes.csv")
                    st.download_button(
                        label="üì• Exportar CSV",
                        data=csv_buffer,
                        file_name="km_rodado_vs_manutencoes.csv",
                        mime="text/csv"
                    )
                with col2:
                    pdf_buffer = exportar_pdf(df, "KM Rodado vs. Manuten√ß√µes")
                    st.download_button(
                        label="üì• Exportar PDF",
                        data=pdf_buffer,
                        file_name="km_rodado_vs_manutencoes.pdf",
                        mime="application/pdf"
                    )
            else:
                st.warning("‚ö†Ô∏è Nenhuma manuten√ß√£o encontrada para os filtros aplicados!")

    # Bot√£o para voltar ao Dashboard
    if st.button("üè† Home"):
        st.session_state['menu_principal'] = "Dashboard"
        st.rerun()

if __name__ == "__main__":
    exibir_relatorios()
